#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX 100
char stack[MAX];
char infix[MAX],postfix[MAX];
int top=-1;

void push(int);
int pop();
int isempty();
void intopost();
int precedence(char);
void print();

int main()
{
    int result;
    printf("infix in the expression=");
    gets(infix);

    intopost();
    result=post_evale();
    print();
    printf("the result obtained after postfix evaluation is: ");
    printf("%d\n",result);
    return 0;
}
void intopost()
{
    int i,j=0;
    char symbol,next;
    for(i=0; i<strlen(infix); i++)
    {
        symbol=infix[i];

        switch(symbol)
        {
        case '(':
            push(symbol);
            break;

        case ')':
            while((next=pop())!='(')
            {
                postfix[j]=next;
                j++;
            }
            break;
        case'+':
        case'-':
        case'/':
        case'*':
            while(!isempty()&&precedence(stack[top])>=precedence(symbol))
                postfix[j++]=pop();
            push(symbol);
            break;
        default :
            postfix[j++]=symbol;
            break;

        }
    }
    while(!isempty())

        postfix[j++]=pop();
    postfix[j]='\0';
}


int precedence(char symbol)
{
    switch(symbol)
    {
    case'^':
        return 3;

    case'*':
    case'/':
        return 2;

    case'+':
    case'-':
        return 1;

    default :
        return 0;
    }
}

void push(int c)
{
    if(top==MAX-1)
    {
        printf("over flow");
        return;
    }

    top++;
    stack[top]=c;

}
int pop() {
    int value;
    if(top==-1)
    {
        printf("stack is underflow\n");
        exit(1);
    }
    value=stack[top];
    top=top-1;
    return value;
}
int isempty()
{
    if(top==-1)
        return 1;
    else
        return 0;
}
void print()
{
    int i=0;
    printf("envalute the postfix expression=");
    while(postfix[i])
    {
        printf("%c",postfix[i++]);
    }
    printf("\n");
}


int post_evale()
{
    int i;
    int a,b;
    for(i=0; i<strlen(postfix); i++)
    {
        if(postfix[i]>='0'&&postfix[i]<='9')
            push(postfix[i]-'0');
        else
        {
            a=pop();
            b=pop();

            switch(postfix[i])
            {
            case'+':
                push(b+a);
                break;
            case'-':
                push(b-a);
                break;
            case'*':
                push(b*a);
                break;
            case'/':
                push(b/a);
                break;
            case'^':
                push(pow(b,a));
                break;

            }
        }
    }
    return pop();
}

